/**
 * Flowtype definitions for indes
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

// @flow

import util from "util";

import Promise, { any } from "bluebird";

import ExpressCassandra from "express-cassandra";

import cql from "cassandra-driver";

import type {
    FusedModelType,
    FusedModelType_ANY,
    Model
} from "./Model";

import type {
    ExtendedSchemaDescription as ExtendedSchemaDescriptionType,
    NestedSchemaDescription as NestedSchemaDescriptionType,
    possibleValuesTypes as possibleValuesTypesType,
    possibleValuesValues as possibleValuesValuesType,
    possibleValueTypesCassandraPlainText as possibleValueTypesCassandraPlainTextType,
    possibleValueTypesYugaByteYCQL as possibleValueTypesYugaByteYCQLType,
    Schema,
    SchemaDescription as SchemaDescriptionType,
    SchemaFieldDescription as SchemaFieldDescriptionType,
    SchemaOptions as SchemaOptionsType,
} from "./Schema";

import type {
    JSONB
} from "./SpecialTypes/JSONB";

import type {
    Map
} from "./SpecialTypes/Map";


export type ExtendedSchemaDescription = ExtendedSchemaDescriptionType;
export type NestedSchemaDescription = NestedSchemaDescriptionType;
export type possibleValuesTypes = possibleValuesTypesType;
export type possibleValuesValues = possibleValuesValuesType;
export type possibleValueTypesCassandraPlainText = possibleValueTypesCassandraPlainTextType;
export type possibleValueTypesYugaByteYCQL = possibleValueTypesYugaByteYCQLType;
export type SchemaType = Schema;
export type SchemaDescription = SchemaDescriptionType;
export type SchemaFieldDescription = SchemaFieldDescriptionType;
export type SchemaOptions = SchemaOptionsType;


declare module.exports:{

    CADOOSE: {
    ExpressCassandra: ExpressCassandra,
    ...
    },

    MakeCadoose: (
        clientOptions:{
            contactPoints: Array<string>,
            protocolOptions: { port: number },
            keyspace: string,
            queryOptions: {consistency: number}
        }, ormOptions: {
            defaultReplicationStrategy : {
                class: string,
                replication_factor: number
            },
            migration: string,
            udts?:Object,
            udfs?:Object,
            udas?:Object
        }) => {
            _expressCassandra: null | ExpressCassandra,
            _directClient: null | cql.Client,
            models: {
                [name: String]: FusedModelType<{}>,
                ...
            },
            _defered: {
                [name: String]: {
                    loaded: Boolean,
                    synced: Boolean,
                        ...
                },
                ...
            },
            schemas: {
                [name: String]: Schema,
                ...
            },
            clientOptions: Object,
            ormOptions: Object,
            udts: Object,
            udfs: Object,
            udas: Object,
            constructor(
                _expressCassandra: ExpressCassandra,
                clientOptions: Object,
                ormOptions: Object
            ):Object,

            syncModel<T>(model: FusedModelType<T>): Promise<FusedModelType<T>>,
            syncAllModels():Promise<FusedModelType_ANY[]>,
            loadSchema(modelName:string, modelSchema:Schema):Promise<FusedModelType_ANY>,
            _undeferModel(modelName:string, modelSchema:Schema, syncModel:bool, forceSync:bool):Promise<FusedModelType_ANY>,
            loadSchemaDefered(modelName:string, modelSchema:Schema, syncModel:bool):FusedModelType_ANY&{undefer:() => FusedModelType_ANY}


    }&{
        createClient:() => void,
        setDirectory:() => void,
        syncModelFileToDB:() => void,
        bind:() => void,
        bindAsync:() => Promise<void>,

        init:() => void,
        initAsync:() => Promise<void>,

        getTableList:() => void,
        getTableListAsync:() => Promise<void>,

        export:() => void,
        exportAsync:() => Promise<void>,

        import:() => void,
        importAsync:() => Promise<void>,

        loadSchema:() => void,
        loadSchemaAsync:() => Promise<void>,

        uuid:() => void,
        uuidFromString:() => void,
        uuidFromBuffer:() => void,
        timeuuid:() => void,
        timeuuidFromDate:() => void,
        timeuuidFromString:() => void,
        timeuuidFromBuffer:() => void,
        maxTimeuuid:() => void,
        minTimeuuid:() => void,

        doBatch:() => void,
        doBatchAsync:() => Promise<void>,

        _translateFileNameToModelName:() => void,

        consistencies:any,
        datatypes:any,
        driver:any,
        instance:any,

        close:() => void,
        closeAsync:() => void,
    },


    Schema:Class<Schema>,
    Model:Class<Model>,

    SpecialTypes: {
        Map: Map,
        JSONB: JSONB
    }
}